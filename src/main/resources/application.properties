# database init, supports mysql too
server.address=0.0.0.0
server.port=8080

ownerservice.url=http://localhost:8081

#database=h2
#spring.sql.init.schema-locations=classpath*:db/${database}/schema.sql
#spring.sql.init.data-locations=classpath*:db/${database}/data.sql

database=postgres
spring.datasource.jdbc-url=${POSTGRES_URL:jdbc:postgresql://localhost/petclinic}
spring.datasource.username=${POSTGRES_USER:petclinic}
spring.datasource.password=${POSTGRES_PASS:petclinic}
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# SQL is written to be idempotent so this is safe
spring.sql.init.mode=always
#spring.main.allow-bean-definition-overriding=true

# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=true

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework.samples.petclinic=DEBUG
# Maximum time static resources should be cached
spring.web.resources.cache.cachecontrol.max-age=12h
